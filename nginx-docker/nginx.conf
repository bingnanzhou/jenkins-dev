# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

daemon off;
user nginx;
worker_processes auto;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
load_module /etc/nginx/modules/ngx_http_headers_more_filter_module.so;
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    # hardening
#    add_header X-Frame-Options "SAMEORIGIN" always;
#    add_header X-Content-Type-Options nosniff;
#    add_header X-XSS-Protection "1; mode=block" always;
#    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ssl.google-analytics.com https://assets.zendesk.com https://connect.facebook.net; img-src 'self' https://ssl.google-analytics.com https://s-static.ak.facebook.com https://assets.zendesk.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://assets.zendesk.com; font-src 'self' https://themes.googleusercontent.com; frame-src https://assets.zendesk.com https://www.facebook.com https://s-static.ak.facebook.com https://tautt.zendesk.com; object-src 'none'";
#    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";
    more_clear_headers "Server";
    # end hardening

    upstream api {
        server loopback-api:3000;
    }

    #For Dev, supports ssh reverse tunnel to local machine/server
    #Uncomment the upstream below, and the location /usam proxy_pass (comment out the try_files)
    #upstream ui {
    #    server 127.0.0.1:3001;
    #}

    log_format  main  '$remote_addr to: $upstream_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    access_log  /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    include /etc/nginx/conf.d/*.conf;

    server {
        listen 443 ssl;
	
        server_name "";
        ssl off;

        ssl_certificate /etc/nginx/selfsigned.crt;
        ssl_certificate_key /etc/nginx/selfsigned.key;

        index index.html;
        root /usr/local/www;

        error_page 401 = @login401;
        location @login401 {
            return 302 https://$host/auth/login?returnTo=https://$host$request_uri;
        }

        location @error401 {
            return 401;
        }

        error_page 403 = @error403;
        location @error403 {
            more_set_headers "Content-Type: text/html";
            return 403 '<html><body>Unauthorized. Please <a href="/auth/logout?returnTo=https://$host$request_uri">Logout</a>, then use an Admin account to login</body></html>';
        }

        location /usam {
            auth_request /isAuthorizedTWC_SUPER;
            auth_request_set $auth_status $upstream_status;

            # proxy_pass http://ui;
            try_files $uri /usam/index.html;
        }

        location /isAuthenticated {
            expires -1;
            # internal;
            set $query '';
            if ($request_uri ~* "[^\?]+\?(.*)$") {
                set $query $1;
            }
            proxy_pass http://api/auth/isAuthenticated?$query;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Can't get this to work with the query right
        #location /api/users/me/isAuthorizedWithRoles {
        #    internal;
        #    set $query '';
        #    if ($request_uri ~* "[^\?]+\?(.*)$") {
        #        set $query $1;
        #    }
        #    proxy_pass http://api?$query;
        #    proxy_pass_request_body off;
        #    proxy_set_header Content-Length "";
        #    proxy_set_header X-Original-URI $request_uri;
        #}

        location /isAuthorizedTWC_SUPER {
            expires -1;
            internal;
            set $query '';
            if ($request_uri ~* "[^\?]+\?(.*)$") {
                set $query $1;
            }
            proxy_pass http://api/api/users/me/isAuthorizedWithRoles?roles=["TWC_SUPER"]&$query;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /auth {
            proxy_pass http://api;
            proxy_read_timeout 300s;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api {
            expires -1;
            error_page 401 = @error401;
            auth_request /isAuthenticated;
            auth_request_set $auth_status $upstream_status;
            proxy_pass http://api;
            proxy_read_timeout 300s;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /explorer {
            auth_request /isAuthorizedTWC_SUPER;
            auth_request_set $auth_status $upstream_status;
            proxy_pass http://api;
            proxy_read_timeout 300s;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api-status/ {
            proxy_pass http://api/;
            proxy_read_timeout 300s;
        }

        location /invitation/accept {
            auth_request /isAuthenticated;
            auth_request_set $auth_status $upstream_status;
            proxy_pass http://api;
            proxy_read_timeout 300s;
        }
    }
}
